% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tte_marginalize.R
\name{tte_marginalize}
\alias{tte_marginalize}
\title{Marginalize DPMM output for time-to-event data}
\usage{
tte_marginalize(
  samples,
  data,
  stratum_var = NULL,
  hazard_times = NULL,
  log_hazard = TRUE,
  survival_times = NULL,
  log_survival = TRUE,
  rmst_times = NULL,
  log_rmst = TRUE
)
}
\arguments{
\item{samples}{output from calling \code{\link{tte_reg_bnp}}}

\item{data}{a \code{\link[base]{data.frame}} consisting of covariates over which marginalization should be performed}

\item{stratum_var}{a string giving the name of the stratification variable (e.g., treatment arm) present in the \code{formula} used when calling \code{\link{tte_reg_bnp}} as well as the \code{data}}

\item{hazard_times}{a \code{\link[base]{numeric}} \code{vector} of nonnegative values giving the time points to evaluate the hazard function; if \code{NULL}, will not evaluate hazard function}

\item{log_hazard}{\code{logical}: if \code{TRUE}, evaluates the hazard function on the log scale; ignored if \code{hazard_times} is NULL}

\item{survival_times}{a \code{\link[base]{numeric}} \code{vector} of nonnegative values giving the time points to evaluate the survival function; if \code{NULL}, will not evaluate survival function}

\item{log_survival}{\code{logical}: if \code{TRUE}, evaluates the survival function on the log scale; ignored if \code{survival_times} is NULL}

\item{rmst_times}{a \code{\link[base]{numeric}} \code{vector} of nonnegative values giving the time points to evaluate the restricted mean survival time (RMST); if \code{NULL}, will not evaluate the RMST}

\item{log_rmst}{\code{logical}: if \code{TRUE}, evaluates the RMST on the log scale; ignored if \code{rmst_times} is NULL}
}
\value{
A named list of class \code{tte_marginalize} consisting of marginalized posterior samples.
Let \eqn{M}, \eqn{T}, and \eqn{S} denote the number of MCMC samples, time points, and strata, respectively.
The returned object contains:
\itemize{
\item \code{survival}: an \eqn{M \times T \times S} array giving posterior samples for the survival function for each stratum
\item \code{hazard}: an \eqn{M \times T \times S} array giving posterior samples for the hazard function for each stratum
\item \code{rmst}: an \eqn{M \times T \times S} array giving posterior samples for the restricted mean survival time (RMST) for each stratum
}
}
\description{
Report posterior hazard, survival, and/or RMST functions based on Dirichlet
process mixture model output. Uses the Bayesain bootstrap when there are
covariates
}
\examples{

 ##  Set seed for reproducibility
 set.seed(741)
 
 ##  Generate current and historical data sets
 n     <- 100
 n0    <- 100
 N     <- n + n0
 pexch <- 0.80
 beta  <- cbind(c(1, 1, 0), c(-1, -1, 0))
 sigma <- c(0.5, 0.75)
 a     <- rbinom(N, 1, 0.5)      ##  tretment indicator
 x     <- rbinom(N, 1, 0.5)      ##  binary covariate
 eps0  <- rbinom(n0, 1, pexch)   ##  exchangeability indicator
 eps   <- c(rep(1, n), 2 - eps0) ##  1 = exch; 2 = unexch
 X     <- cbind(1, a, x)
 Mu    <- unlist( 
   lapply(1:N, function(i) { as.numeric(X[i, ] \%*\% beta[, eps[i]] ) } ) 
 )
 logt     <- rnorm(N, Mu, sigma[eps])
 logc     <- rnorm(N, mean(Mu) + 0.50, sd = 0.25)
 event    <- logt <= logc
 logy     <- ifelse(event, logt, logc)
 dat      <- data.frame(y = exp(logy), event = event, a = a, x = x)
 curdata  <- dat[1:n, ]
 histdata <- dat[-(1:n), ]
 
 ##  Times for marginalization
 tau   = max(curdata$y[curdata$event == 1])
 times = seq(0.01, tau, length.out = 5)
 
 ##  Fit intercept only (no borrowing)
 fit.intonly = tte_reg_bnp(
   survival::Surv(y, event) ~ 1, data = curdata, K = 5
   , nburnin = 0, nsamples = 100
 )
 
 ##  Fit treatment only (with borrowing)
 fit.strataonly = tte_reg_bnp(
   survival::Surv(y, event) ~ a, data = curdata, K = 5
   , external_data = histdata, K_unexch = 5
   , nburnin = 0, nsamples = 100
 )
 
 
 ##  Fit treatment and binary covariate (with borrowing)
 fit.anova_ddp = tte_reg_bnp(
   survival::Surv(y, event) ~ a + x, data = curdata, K = 5
   , external_data = histdata, K_unexch = 5
   , nburnin = 0, nsamples = 100
 )
 
 ##  Fit models stratified by arm (no borrowing)
 fit.stratified = lapply(
   0:1, function(arm) {
     tte_reg_bnp(
       survival::Surv(y, event) ~ x
       , data = curdata[curdata$a == arm, ]
       , external_data = histdata[histdata$a == arm, ]
       , K = 5, K_unexch = 5
       , nburnin = 0, nsamples = 100
     )
   }
 )
 
 ##  Marginalize strata only (no Bayesian bootstrap)
 marg.strataonly = tte_marginalize(
   fit.strataonly, curdata, stratum_var = 'a'
   , hazard_times = times, log_hazard = TRUE
   , survival_times = times, log_survival = FALSE
 )
 
 ##  Marginalize w/ covariate model(uses Bayesian bootstrap)
 marg.anova_ddp = tte_marginalize(
   fit.anova_ddp, curdata, stratum_var = 'a'
   , hazard_times = times, log_hazard = TRUE
   , survival_times = times, log_survival = FALSE
 )
 
 ## Marginalize with stratified covariate model (uses Bayesian bootstrap)
 marg.stratified = tte_marginalize(
   fit.stratified, curdata, stratum_var = 'a'
   , hazard_times = times, log_hazard = TRUE
   , survival_times = times, log_survival = FALSE
 )
 
 ##  Summarize marginal estimates
 summary( marg.strataonly )
 summary( marg.anova_ddp, mean, sd, ~posterior::quantile2(.x, probs = c(0.025, 0.975)) )
 summary( marg.stratified, mean, sd, ~posterior::quantile2(.x, probs = c(0.025, 0.975)) )

}
