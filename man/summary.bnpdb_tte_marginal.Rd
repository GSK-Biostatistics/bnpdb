% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tte_print_and_summarize.R
\name{summary.bnpdb_tte_marginal}
\alias{summary.bnpdb_tte_marginal}
\title{Summarize a bnpdb time-to-event regression model with marginal parameters}
\usage{
\method{summary}{bnpdb_tte_marginal}(object, ...)
}
\arguments{
\item{object}{An object of class \code{bnpdb_tte_marginal} obtained from calling \code{\link{tte_marginalize}} (or a \code{list} of such objects).}

\item{...}{arguments to pass onto \code{\link[posterior]{summarize_draws}}}
}
\value{
a named list consisting of the following:
\itemize{
\item \code{beta}: \eqn{K \times p} \code{matrix} giving cluster regression coefficients for the exchangeable population; defaults to random draws from a multivariate normal centered at the MLE using \code{data} with covariance equal to the inverse Fisher Information
\item \code{tau}: \eqn{K}-\code{vector} giving cluster precision parameters for the exchangeable population; defaults to random draws from a log-normal centered at the MLE using \code{data} with covariance equal to the inverse Fisher Information
\item \code{alpha}: Dirichlet process concentration parameter for exchangeable population; set to the prior mean implied by \code{alpha_prior}
\item \code{v}: \eqn{(K-1)} \code{vector} giving stick-breaking variables for the exchangeable population; defaults to \eqn{(K - 1)} samples from a Beta(1, alpha) distribution
\item \code{pexch}: probability that a subject in \code{external_data} is exchangeable; defaults to prior mean of \code{pexch_prior}; ignored if \code{external_data} is \code{NULL}
\item \code{eps0}: \eqn{n_0 \times K_unexch} matrix of exchangeability indicators for external data; default value is based on highest likelihood from initial values; ignored if \code{external_data} is \code{NULL}
\item \code{beta_unexch}: \eqn{K_unexch \times p} \code{matrix} giving cluster regression coefficients for unexchangeable population; default behavior is analogous to \code{beta} but using \code{external_data}; ignored if \code{external_data} is \code{NULL}
\item \code{tau_unexch}: \eqn{K_unexch}-\code{vector} giving cluster precision parmaeters for unexchangeable population; default behavior is analogous to \code{tau} but using \code{external_data}; ignored if \code{external_data} is \code{NULL}
\item \code{alpha_unexch}: mean of \code{alpha_unexch_prior}; ignored if \code{external_data} is \code{NULL}
\item \code{v_unexch}: \eqn{(K_{unexch} - 1)}-vector giving stick-breaking variables for unexchangeable population; defaults to samples from Beta(1, alpha_unexch); ignored if \code{external_data} is \code{NULL}
\item \code{z0}: a \eqn{n_0}-\code{vector} consisting of starting values for latent clusters for the external data; default is based on likelihood using initial parameters; ignored if \code{external_data} is \code{NULL}; if \code{eps0 == 1} then \code{z0} should be between \code{1:K} otherwise between \code{1:K_unexch}. Defaults to the maximum log likelihood among the \code{K} clusters using \code{beta_init}, \code{tau_init}, \code{beta_unexch_init}, and \code{tau_unexch_init}. Note: if \code{z0} is specified then \code{eps0} must also be specified.
}
}
\description{
Summarize a bnpdb time-to-event regression model with marginal parameters
}
\examples{
## Set seed for reproducibility
set.seed(741)

## Generate current and historical data sets
n     <- 100
n0    <- 100
N     <- n + n0
pexch <- 0.80
beta  <- cbind(c(1, 1, 0), c(-1, -1, 0))
sigma <- c(0.5, 0.75)
a     <- rbinom(N, 1, 0.5)      ## tretment indicator
x     <- rbinom(N, 1, 0.5)      ## binary covariate
eps0  <- rbinom(n0, 1, pexch)   ## exchangeability indicator
eps   <- c(rep(1, n), 2 - eps0) ## 1 = exch; 2 = unexch
X     <- cbind(1, a, x)
Mu    <- unlist( 
  lapply(1:N, function(i) { as.numeric(X[i, ] \%*\% beta[, eps[i]] ) } ) 
)
logt     <- rnorm(N, Mu, sigma[eps])
logc     <- rnorm(N, mean(Mu) + 0.50, sd = 0.25)
event    <- logt <= logc
logy     <- ifelse(event, logt, logc)
dat      <- data.frame(y = exp(logy), event = event, a = a, x = x)
curdata  <- dat[1:n, ]
histdata <- dat[-(1:n), ]

## Times for marginalization
tau   = max(curdata$y[curdata$event == 1])
times = seq(0.01, tau, length.out = 5)

## Fit intercept only (no borrowing)
fit.intonly = tte_reg_bnp(
  survival::Surv(y, event) ~ 1, data = curdata, K = 5
  , nburnin = 0, nsamples = 100
)

## Fit treatment only (with borrowing)
fit.strataonly = tte_reg_bnp(
  survival::Surv(y, event) ~ a, data = curdata, K = 5
  , external_data = histdata, K_unexch = 5
  , nburnin = 0, nsamples = 100
)


## Fit treatment and binary covariate (with borrowing)
fit.anova_ddp = tte_reg_bnp(
  survival::Surv(y, event) ~ a + x, data = curdata, K = 5
  , external_data = histdata, K_unexch = 5
  , nburnin = 0, nsamples = 100
)

## Fit models stratified by arm (no borrowing)
fit.stratified = lapply(
  0:1, function(arm) {
    tte_reg_bnp(
      survival::Surv(y, event) ~ x
      , data = curdata[curdata$a == arm, ]
      , external_data = histdata[histdata$a == arm, ]
      , K = 5, K_unexch = 5
      , nburnin = 0, nsamples = 100
    )
  }
)

## Marginalize strata only (no Bayesian bootstrap)
marg.strataonly = tte_marginalize(
  fit.strataonly, curdata, stratum_var = 'a'
  , hazard_times = times, log_hazard = TRUE
  , survival_times = times, log_survival = FALSE
)

## Marginalize models stratified by arm (does Bayesian bootstrap). Note that
## `object` can be a list.
marg.stratified = tte_marginalize(
  fit.anova_ddp, curdata, stratum_var = 'a'
  , hazard_times = times, log_hazard = TRUE
  , survival_times = times, log_survival = FALSE
)

## Summarize marginal estimates
summary( marg.strataonly )
summary( marg.stratified, mean, sd, ~posterior::quantile2(.x, probs = c(0.025, 0.975)) )

}
